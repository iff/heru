#!/usr/bin/env node

require('colors');
var heru = require('../'), Node = heru.Node;

var join = require('path').join
  , realpathSync = require('fs').realpathSync
  , inspect = require('util').inspect;

var defaultLibraryPath = join(process.env.HOME, '.heru')

var program = require('commander');
program
  .version(heru.Version.yellow)
  .option('-l, --library <path>', 'path to the library', String, defaultLibraryPath)
  .option('-n, --dry-run', 'do not make any changes to the system')

program.command('apply <hostname>').action(apply);

program.parse(process.argv);

function apply(hostname) {
  global.library = program.library;
  var node = new Node(hostname, loadNodeSpec(hostname));

  node.verify().when(function(err) {
    if (err) {
      if (program['dry-run']) {
        dumpError(err, 0);
      } else {
        console.log('Node is in incomplete state. Taking corrective measures.');
        dumpError(err, 0);
        node.amend().when(function(err) {
          if (err) dumpError(err, 0);
        });
      }
    } else {
      console.log('Node verified. Nothing to do');
    }
  })
}


// Load the configuration for the given node.
function loadNodeSpec(hostname) {
  var path = hostname.split('.').reverse();
  return require(join(program.library, 'nodes', path.join('/')));
}


// There is no way to get the FQDN in node. The user needs to supply the
// hostname on the commandline.


function dumpError(err, indent) {
  if (err) console.log(err.message);
  if (!err.children) return;

  err.children.forEach(function(err) {
    dumpError(err, indent + 1);
  });
}
